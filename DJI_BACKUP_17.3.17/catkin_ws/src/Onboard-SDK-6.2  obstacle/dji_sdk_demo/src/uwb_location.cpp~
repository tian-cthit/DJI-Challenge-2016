/*
 * pm25.cpp
 *
 *  Created on: Oct 10, 2015
 *      Author: Menchi Guo
 */

#include "uwb_location.h"

int pm25_fd;
int init_pm25(const char *device, int baudrate)
{
    pm25_fd = open(device, O_RDWR | O_NOCTTY);
    if(pm25_fd  < 0)
    {
        perror("Open PM25 Failed\n");
        return -1;
    }


    struct termios Opt;

    if(tcgetattr(pm25_fd, &Opt) != 0 )
    {
        perror("tcgetattr Failed\n");
        return -1;
    }

    tcflush(pm25_fd, TCIOFLUSH);

    Opt.c_cflag |= (CLOCAL | CREAD);

    Opt.c_cflag &= ~CSIZE;//
    Opt.c_cflag |= CS8;//8 data bit

    Opt.c_cflag &= ~PARENB;//none enum
    Opt.c_cflag &= ~INPCK;///not 

    Opt.c_cflag &= ~CSTOPB;//space

    cfsetispeed(&Opt, B115200);
    cfsetospeed(&Opt, B115200);

    Opt.c_lflag  &= ~(ICANON | ECHO | ECHOE | ISIG);//origin output
    Opt.c_oflag  &= ~OPOST;//not process output

    Opt.c_cc[VTIME]  = 0;
    Opt.c_cc[VMIN] = 0;

    tcflush(pm25_fd, TCIFLUSH);// give up all data (not read not write)

    if (tcsetattr(pm25_fd, TCSANOW, &Opt) != 0 )
    {
        perror("tcsetattr Failed\n");
        return -1;
    }

    return 0;
    
}

int read_pm25(unsigned char *buf, int len)
{
    int ret = -1;
  //  ROS_INFO("SYTART READ\n");
    ret = read(pm25_fd, buf, len);
 //	ROS_INFO("stop READ\n");
    return ret;
}

void close_pm25()
{
    close(pm25_fd);
}

void INF_DW1000_Module_Data_Convert(unsigned char recieve_buf[],float *uwb_position_x,float *uwb_position_y,float *uwb_position_z)
{
	unsigned char recieve_buf_sum = 0;//Ð£ÑéÎ»
	unsigned char i = 0;
	  float temp=0.0;
         float dis[4];
         static float dis_[4];
/*
	if((recieve_buf[0] == 0x58) && (recieve_buf[1] == 0x02))//Ö¡Í·°üÍ·Œì²â
	{
		for(i = 0;i < (RECIEVE_BUF_SIZE - 1);i++)//×îºó×ÖœÚÎªÐ£ÑéºÍ
		{
			recieve_buf_sum += recieve_buf[i];
		}
		
		if(recieve_buf_sum == recieve_buf[23])//ŒìÑéºÍ Œì²é
		{
			dis[0] = ((float)Byte16(unsigned short int, recieve_buf[2],  recieve_buf[3])) / 100;
			dis[1] = ((float)Byte16(unsigned short int, recieve_buf[4],  recieve_buf[5])) / 100;
			dis[2] = ((float)Byte16(unsigned short int, recieve_buf[6],  recieve_buf[7])) / 100;
			dis[3] = ((float)Byte16(unsigned short int, recieve_buf[8],  recieve_buf[9])) / 100;	
			
			dis_[0] = dis[0];
			dis_[1] = dis[1];
			dis_[2] = dis[2];
			dis_[3] = dis[3];
                        printf("dis_[0]====%f\n",dis_[0]);
                        printf("dis_[1]====%f\n",dis_[1]);
			printf("dis_[3]====%f\n",dis_[3]);
                        
		}

		if(dis[0] == 0) dis[0] = dis_[0];
		if(dis[1] == 0) dis[1] = dis_[1];
		if(dis[2] == 0) dis[2] = dis_[2];
		if(dis[3] == 0) dis[3] = dis_[3];
	}
*/	
         
			dis[0] = ((float)Byte16(unsigned short int, recieve_buf[2],  recieve_buf[3])) / 100;
			dis[1] = ((float)Byte16(unsigned short int, recieve_buf[4],  recieve_buf[5])) / 100;
			dis[2] = ((float)Byte16(unsigned short int, recieve_buf[6],  recieve_buf[7])) / 100;
			dis[3] = ((float)Byte16(unsigned short int, recieve_buf[8],  recieve_buf[9])) / 100;	
			
			dis_[0] = dis[0];
			dis_[1] = dis[1];
			dis_[2] = dis[2];
			dis_[3] = dis[3];
                        cout<<"dis_[0]=="<<dis_[0]<<endl;
			cout<<"dis_[1]=="<<dis_[1]<<endl;
			cout<<"dis_[]=="<<dis_[3]<<endl;
                        printf("dis_[0]====%f\n",dis_[0]);
                        printf("dis_[1]====%f\n",dis_[1]);
			printf("dis_[3]====%f\n",dis_[3]);	
	*uwb_position_x= (pow(dis_[1],2) - pow(dis_[3],2) + 100) / 20;//ŽËŽŠÐÞžÄÎªfilterºóµÄÊýŸÝ
        *uwb_position_y= (pow(dis_[0],2) - pow(dis_[1],2) + 100) / 20;
        temp = pow(dis_[0],2) - ( pow(*uwb_position_x,2) + pow(*uwb_position_y,2) );
	if(temp < 0) temp = 0;//ÈôtempÎªžºÊý£¬ÔòËµÃ÷·ÉÐÐÆ÷ŽŠÓÚÓë»ùÕŸµÈžßÎ»ÖÃžœœü
	*uwb_position_z= sqrt(temp) + 1;  
	
}
